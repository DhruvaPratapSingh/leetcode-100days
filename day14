https://leetcode.com/problems/number-of-recent-calls/?envType=study-plan-v2&envId=leetcode-75


class RecentCounter {
public:
queue<int>q;
    RecentCounter() {   
    }
    
    int ping(int t) {
        if(q.size()==0){
            q.push(t);
            return 1;
        }
        else{
            if(t<=3000) q.push(t);
            else{
                int diff=t-3000;
                while(!q.empty() and diff>q.front()){
                    q.pop();
                }
                q.push(t);
            }
            return q.size();
        }
    }
};

/**
 * Your RecentCounter object will be instantiated and called as such:
 * RecentCounter* obj = new RecentCounter();
 * int param_1 = obj->ping(t);
 */



https://leetcode.com/problems/dota2-senate/submissions/1357390059/?envType=study-plan-v2&envId=leetcode-75


class Solution {
public:
    string predictPartyVictory(string senate) {
        int n=senate.size();
        int r=count(senate.begin(),senate.end(),'R');
        int d=n-r;
        int rc=0,dc=0,i=0;
        while(r>0 and d>0){
            if(senate[i]=='R' and rc>0){
                rc--;
                senate[i]='M';
                r--;
            }
            else if(senate[i]=='D' and dc>0){
                dc--;
                senate[i]='M';
                d--;
            }
            else if(senate[i]=='R')dc++;
            else if(senate[i]=='D')rc++;
            i=(i+1)%n;
        }
        return d>0 ? "Dire":"Radiant";
    }
};


https://leetcode.com/problems/longest-zigzag-path-in-a-binary-tree/?envType=study-plan-v2&envId=leetcode-75


int ans;
    void solve(TreeNode* root,bool flag,int cnt){
        if(!root) return;
        ans=max(ans,cnt);
        if(flag){
             solve(root->left,!flag,cnt+1);
             solve(root->right,1,1);
        }else{
              solve(root->right,!flag,cnt+1);
             solve(root->left,0,1);

        }
    }
    int longestZigZag(TreeNode* root) {
        ans=0;
        solve(root->left,0,1);
        solve(root->right,1,1);
        return ans;
    }

https://leetcode.com/problems/nearest-exit-from-entrance-in-maze/?envType=study-plan-v2&envId=leetcode-75

class Solution {
public:
    int nearestExit(vector<vector<char>>& maze, vector<int>& entrance) {
      int r=maze.size();
      int c=maze[0].size();
      queue<pair<int,int>>q;
      int step=1;
     vector<int>rd={0,0,1,-1};
     vector<int>cd={1,-1,0,0};
     q.push({entrance[0],entrance[1]});
     maze[entrance[0]][entrance[1]]='+';
     while(!q.empty()){
        int n=q.size();
       while(n--){
        auto [x_c,y_c]=q.front();
        q.pop();
        for(int k=0;k<4;k++){
          int x=x_c+rd[k];
          int y=y_c+cd[k];

          if(x<0 || y<0 || x>=r || y>=c || maze[x][y]=='+')continue;
          if(x==0 || y==0 || x==r-1|| y==c-1)return step;
          maze[x][y]='+';
          q.push({x,y});
        }
       }
        step++;
       }
       return -1;
     }
};



https://leetcode.com/problems/rotting-oranges/?envType=study-plan-v2&envId=leetcode-75


class Solution {
public:
    int orangesRotting(vector<vector<int>>& grid) {
        int n=grid.size();
        int m=grid[0].size();
        queue<pair<int,int>>q;
        int fresh=0;
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(grid[i][j]==2)q.push({i,j});
                if(grid[i][j]==1)fresh++;
            }
        }
        if(fresh==0)return 0;
        if(q.size()==0)return -1;
        vector<int>rd={0,0,1,-1};
        vector<int>cd={1,-1,0,0};
        int ans=0;
        while(!q.empty()){
            int k=q.size();
            while(k--){
                auto [x_c,y_c]=q.front();
                q.pop();
                for(int i=0;i<4;i++){
                    int x=x_c+rd[i];
                    int y=y_c+cd[i];
                    if(x<n and x>=0  and y<m and y>=0 and grid[x][y]==1){
                    grid[x][y]=2;
                    q.push({x,y});
                    }
                }
            }
            ans++;
        }
         for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(grid[i][j]==1)return -1;
            }
        }
        return ans==0 ? 0:ans-1;
    }
};

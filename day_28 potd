https://leetcode.com/problems/path-with-maximum-probability/description/?envType=daily-question&envId=2024-08-31

unordered_map<int, vector<pair<int, double>>> adj;
for (int i = 0; i < edges.size(); i++) {
    int u = edges[i][0];
    int v = edges[i][1];
    adj[u].push_back({v, succProb[i]});
    adj[v].push_back({u, succProb[i]});
}

vector<double> dist(n, 0.0);
priority_queue<pair<double, int>> pq;
pq.push({1.0, start_node});
dist[start_node] = 1.0;

while (!pq.empty()) {
    auto ele = pq.top();
    double prob = ele.first;
    int node = ele.second;
    pq.pop();

    if (node == end_node) return prob;

    for (auto nbr : adj[node]) {
        int newnode = nbr.first;
        double newprob = nbr.second * prob;

        if (dist[newnode] < newprob) {
            dist[newnode] = newprob;
            pq.push({newprob, newnode});
        }
    }
}
return 0.0;
 }
